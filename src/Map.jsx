import React, { Fragment } from "react";
import { Map, TileLayer, Polygon } from "react-leaflet";

import DrawTools from "./components/DrawTools";
import FullscreenControl from "react-leaflet-fullscreen";
import SaveModal from "./components/saveModal";

const bethanchowk = {
  type: "Feature",
  geometry: {
    type: "Polygon",
    coordinates: [
      [
        [85.56578614300008, 27.544034082000053],
        [85.56486483000003, 27.54305445700004],
        [85.56167895600004, 27.542304082000044],
        [85.55881789400007, 27.53994389500008],
        [85.55604551800008, 27.53509376900007],
        [85.55316439300003, 27.53371020700007],
        [85.54464520500005, 27.53113733200007],
        [85.54220839400006, 27.528634582000052],
        [85.53895070500005, 27.52843120700004],
        [85.53710083100003, 27.529806019000034],
        [85.53605339300003, 27.532522581000023],
        [85.53362826800003, 27.532226207000065],
        [85.53068164300004, 27.534275269000034],
        [85.52870601900008, 27.538443957000027],
        [85.52935008000009, 27.540305270000033],
        [85.52797139300003, 27.546395645000075],
        [85.52886214300008, 27.547909894000043],
        [85.52658833100008, 27.550498332000075],
        [85.52319995600004, 27.552075457000058],
        [85.52147739400004, 27.553487519000043],
        [85.51817783100006, 27.554280332000076],
        [85.51721120600007, 27.556938957000057],
        [85.51620020500008, 27.557665894000024],
        [85.51492101800005, 27.562590770000043],
        [85.51214014300007, 27.56643239400006],
        [85.51105745500007, 27.566835957000023],
        [85.50958945500008, 27.564397144000054],
        [85.50572495500006, 27.56294333200003],
        [85.50120158100003, 27.558842769000023],
        [85.49864495500003, 27.55802995700003],
        [85.49772376800007, 27.55544089400007],
        [85.49558876800006, 27.553496582000037],
        [85.49472901900003, 27.551321957000027],
        [85.49030876800003, 27.549221707000072],
        [85.48721433100008, 27.545843645000048],
        [85.48573401800007, 27.544794644000035],
        [85.48570026800007, 27.54177183200005],
        [85.48508795500004, 27.540280332000066],
        [85.48216995500007, 27.538614894000034],
        [85.47966870600004, 27.537811332000047],
        [85.47587795600003, 27.53749064400006],
        [85.47406258000007, 27.53806039500006],
        [85.47073301800003, 27.536588644000062],
        [85.46750895500008, 27.537958269000057],
        [85.46044308000006, 27.53787926900003],
        [85.45823783100008, 27.53710833200006],
        [85.45342395600005, 27.53764601900008],
        [85.44933845500003, 27.535306269000046],
        [85.44638520600006, 27.534127770000055],
        [85.44266045600006, 27.53453645700006],
        [85.44136589300007, 27.535650832000044],
        [85.44274164300003, 27.53188245700005],
        [85.44121645500007, 27.528857019000043],
        [85.44103351800004, 27.527442144000076],
        [85.44363133100006, 27.520655894000072],
        [85.44350776800007, 27.51787758200004],
        [85.44503570600006, 27.515271707000068],
        [85.44302226800005, 27.511511394000024],
        [85.44253839300006, 27.507004207000023],
        [85.44158995600003, 27.503936645000067],
        [85.44186789300005, 27.500459395000064],
        [85.44114514300009, 27.494553582000037],
        [85.44149676900008, 27.49163958200006],
        [85.44126064300008, 27.48802770700007],
        [85.44299689300004, 27.48560920700004],
        [85.44297976800004, 27.482935894000036],
        [85.44513283100008, 27.481210145000034],
        [85.44567039300006, 27.47990051900007],
        [85.44421683000007, 27.478428832000077],
        [85.44391270600005, 27.476250332000063],
        [85.44252070600004, 27.474933644000032],
        [85.43966651800008, 27.473320770000043],
        [85.43800295500006, 27.470080082000038],
        [85.43482633100007, 27.467676331000064],
        [85.43103976800006, 27.463807582000072],
        [85.42788608100005, 27.463354894000076],
        [85.42433264300007, 27.460618519000036],
        [85.42314989300007, 27.457844269000077],
        [85.42083933000004, 27.459070394000037],
        [85.41980570500004, 27.458442457000046],
        [85.41846733000006, 27.455696832000058],
        [85.41553583000007, 27.454844457000036],
        [85.41449070600004, 27.453657082000063],
        [85.41420626800004, 27.45173545700004],
        [85.41248639300005, 27.45009689400007],
        [85.41042614300005, 27.449562769000067],
        [85.40895408000006, 27.447220019000042],
        [85.41007551800004, 27.44660626900003],
        [85.41118958000004, 27.44403427000003],
        [85.41264864300007, 27.443617894000056],
        [85.41967195600006, 27.444843769000045],
        [85.42053414300005, 27.443248895000067],
        [85.42462051800004, 27.446419956000057],
        [85.42741170600004, 27.446849332000056],
        [85.42817308100007, 27.444944144000033],
        [85.43008889300006, 27.44417095600005],
        [85.43502301800004, 27.445399457000065],
        [85.43739789300008, 27.447565644000065],
        [85.44037451800006, 27.44951351900005],
        [85.44112039300006, 27.450809895000077],
        [85.44352626800008, 27.45242064400003],
        [85.44927008000008, 27.45383651900005],
        [85.45140345600004, 27.455192770000053],
        [85.45284776800008, 27.45684502000006],
        [85.46001289300006, 27.45774695700004],
        [85.46223164400004, 27.45578795700004],
        [85.46403545600003, 27.458877957000027],
        [85.46669758100006, 27.46089845700004],
        [85.46956039300005, 27.46244758200004],
        [85.47281533100005, 27.462230457000032],
        [85.47742483100006, 27.465538707000064],
        [85.47965920600006, 27.467592832000037],
        [85.48107589300008, 27.469976019000057],
        [85.48118214300007, 27.471348832000047],
        [85.47986545600008, 27.47470183200005],
        [85.48123408100008, 27.477408144000037],
        [85.48377251800008, 27.48051483200004],
        [85.48470289300008, 27.482548956000073],
        [85.48881233100008, 27.48643977000006],
        [85.49300608100003, 27.487739394000073],
        [85.49494039400008, 27.485882144000072],
        [85.49898639400004, 27.483047895000027],
        [85.50641870600003, 27.48063783200007],
        [85.50787264400003, 27.48066245700005],
        [85.51010408100007, 27.47902808200007],
        [85.51398033000004, 27.477648207000072],
        [85.51598620500005, 27.478556269000023],
        [85.52181714300008, 27.479859082000075],
        [85.52451120600006, 27.479675644000054],
        [85.52914758100007, 27.480126332000054],
        [85.53382283100007, 27.481342019000067],
        [85.53895064300008, 27.481774957000027],
        [85.54201101800004, 27.48107833200004],
        [85.54906576900004, 27.478313832000026],
        [85.54929201800007, 27.480376082000078],
        [85.55026939300006, 27.48192489400003],
        [85.54994283000008, 27.483128520000037],
        [85.55145658100008, 27.484507019000034],
        [85.55397826800004, 27.485395082000025],
        [85.55674901800006, 27.48816726900003],
        [85.55612258000008, 27.489426457000036],
        [85.55855301800005, 27.491775457000074],
        [85.55950939400003, 27.49339845700007],
        [85.55906708100008, 27.496714895000025],
        [85.56178926900003, 27.501717769000038],
        [85.56445876900005, 27.502225895000038],
        [85.57180908100008, 27.505882020000058],
        [85.57329989300007, 27.50918451900003],
        [85.57583826800004, 27.511435019000032],
        [85.57922795600007, 27.517119019000063],
        [85.57916689400008, 27.51819239500003],
        [85.57527445600005, 27.52136520700003],
        [85.57581483100006, 27.52248527000006],
        [85.57472108100006, 27.52618089400005],
        [85.57525114300006, 27.52871764500003],
        [85.58010195500003, 27.52895452000007],
        [85.58299926800004, 27.530010644000072],
        [85.58471764300003, 27.52839020700003],
        [85.58395551900009, 27.52691145600005],
        [85.58524651800008, 27.52441576900003],
        [85.58658683100003, 27.526820894000025],
        [85.58816601900008, 27.52845676900006],
        [85.58891876800004, 27.530454332000033],
        [85.58744714300008, 27.530692144000056],
        [85.58615914400008, 27.532402707000074],
        [85.58629964400006, 27.533834519000038],
        [85.58390189400006, 27.535700769000073],
        [85.58298389300006, 27.538608520000025],
        [85.58042733100007, 27.53561114400003],
        [85.57860926900008, 27.53579789400004],
        [85.57830414300008, 27.539151894000042],
        [85.57555301900004, 27.53872208200005],
        [85.57240826900005, 27.53707220700005],[85.57047195600006, 27.53844433200004], [85.57057326800003, 27.53997276900003], [85.56848670500005, 27.542245769000033], [85.56578614300008, 27.544034082000053],
      ],
    ],
  },
};

// Shift function to adjust polygon coords
function shiftGeometry(feature, deltaLng, deltaLat) {
  const shiftedCoordinates = feature.geometry.coordinates.map((polygon) =>
    polygon.map(([lng, lat]) => [lng + deltaLng, lat + deltaLat])
  );

  return {
    ...feature,
    geometry: {
      ...feature.geometry,
      coordinates: shiftedCoordinates,
    },
  };
}

// Convert shifted coordinates for Leaflet

// Convert GeoJSON [lng, lat] to Leaflet [lat, lng]
const convertCoords = (coords) =>
  coords.map((polygon) => polygon.map(([lng, lat]) => [lat, lng]));

// Get centroid for map center
// Compute centroid of polygon coords ([lng, lat])
function getPolygonCentroid(coords) {
  let latSum = 0;
  let lngSum = 0;
  let pointsCount = 0;

  coords[0].forEach(([lng, lat]) => {
    latSum += lat;
    lngSum += lng;
    pointsCount++;
  });

  return [latSum / pointsCount, lngSum / pointsCount];
}

// Apply shift to Bethanchowk polygon
const shiftedBethanchowk = shiftGeometry(bethanchowk, -0.00206, 0.000304);
const polygonPositions = convertCoords(shiftedBethanchowk.geometry.coordinates);

// Calculate centroid for Bethanchowk center (lat, lng)
const [centerLat, centerLng] = getPolygonCentroid(shiftedBethanchowk.geometry.coordinates);

const MapPage= () => {
// const mapConfig = {
//   lat: 28.3949,  //nepal
//   lng: 84.1240,   
//   zoom: 7        
// };

  return (
    <Fragment>
      <div id="map-wrapper" style={{ height: "100vh", width: "100%" }}>
        {/* <Map center={[mapConfig.lat, mapConfig.lng]} zoom={mapConfig.zoom}> */}
        <Map center={[centerLat, centerLng]} zoom={12}>
          <FullscreenControl position="topleft" />
          <DrawTools />
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution="© OpenStreetMap contributors"
          />
          
          {/* <Polygon
            positions={polygonPositions}
            pathOptions={{
              color: "red",
              weight: 3,
              fillColor: "rgba(255,0,0,0.3)",
              fillOpacity: 0.4,
            }}
          /> */}
        </Map>
      </div>
      <SaveModal />
    </Fragment>
  );
};

export default MapPage;
